use sifas_data::prelude::*;
use super::acct_info::{AccInfo, AccKind};
use super::skill::Skill;
use AccKind::*;

#[derive(Debug, Clone, PartialEq)]
pub struct Acc {
    pub attribute: Attribute,
    pub skill: Skill,
    pub kind: AccKind,
    pub appeal: f64,
    pub stamina: f64,
    pub technique: f64,
}

impl Acc {
    pub fn from_info(info: &AccInfo) -> Acc {
        let (appeal, stamina, technique) = stats(&info);
        Acc {
            attribute: info.attribute,
            kind: info.kind,
            skill: Skill::default(),
            appeal, stamina, technique,
        }
    }

    pub fn name(&self) -> String {
        format!("{:?} {:?}", self.attribute, self.kind)
    }

    pub fn is_empty(&self) -> bool {
        match self.kind {
            AccKind::Empty => true,
            _ => false,
        }
    }
}

fn stats(info: &AccInfo) -> (f64, f64, f64) {
    let lv_i = info.lv.max(5) as usize - 1;

    let table: &[(f64, f64, f64)] = match (info.kind, info.rarity) {
        (Empty, _) => return (0.0, 0.0, 0.0),
        (Bangle, _) | (Belt, _) | (Choker, _) => &tables::DLP_STATS,
        (_, Rarity::R) => &tables::CMN_STATS_R,
        (_, Rarity::Sr) => &tables::CMN_STATS_S,
        (_, Rarity::Ur) => &tables::CMN_STATS_U,
    };
    table[lv_i]
}

mod tables {
    pub const DLP_STATS: [(f64, f64, f64); 60] = [
        (234.0, 195.0, 351.0),
        (243.0, 202.0, 364.0),
        (252.0, 210.0, 378.0),
        (261.0, 217.0, 391.0),
        (270.0, 225.0, 405.0),
        (279.0, 233.0, 419.0),
        (288.0, 240.0, 432.0),
        (297.0, 248.0, 446.0),
        (306.0, 255.0, 460.0),
        (315.0, 263.0, 473.0),
        (325.0, 271.0, 487.0),
        (334.0, 278.0, 501.0),
        (343.0, 286.0, 514.0),
        (352.0, 294.0, 528.0),
        (361.0, 301.0, 542.0),
        (370.0, 309.0, 555.0),
        (379.0, 316.0, 569.0),
        (388.0, 324.0, 583.0),
        (397.0, 332.0, 596.0),
        (406.0, 339.0, 610.0),
        (416.0, 347.0, 624.0),
        (425.0, 354.0, 637.0),
        (434.0, 362.0, 651.0),
        (443.0, 370.0, 664.0),
        (452.0, 377.0, 678.0),
        (461.0, 385.0, 692.0),
        (470.0, 393.0, 705.0),
        (479.0, 400.0, 719.0),
        (488.0, 408.0, 733.0),
        (497.0, 415.0, 746.0),
        (507.0, 423.0, 760.0),
        (516.0, 431.0, 774.0),
        (525.0, 438.0, 787.0),
        (534.0, 446.0, 801.0),
        (543.0, 453.0, 815.0),
        (552.0, 461.0, 828.0),
        (561.0, 469.0, 842.0),
        (570.0, 476.0, 856.0),
        (579.0, 484.0, 869.0),
        (588.0, 492.0, 883.0),
        (598.0, 499.0, 897.0),
        (607.0, 507.0, 910.0),
        (616.0, 514.0, 924.0),
        (625.0, 522.0, 937.0),
        (634.0, 530.0, 951.0),
        (643.0, 537.0, 965.0),
        (652.0, 545.0, 978.0),
        (661.0, 552.0, 992.0),
        (670.0, 560.0, 1006.0),
        (679.0, 568.0, 1019.0),
        (689.0, 575.0, 1033.0),
        (698.0, 583.0, 1047.0),
        (707.0, 591.0, 1060.0),
        (716.0, 598.0, 1074.0),
        (725.0, 606.0, 1088.0),
        (734.0, 613.0, 1101.0),
        (743.0, 621.0, 1115.0),
        (752.0, 629.0, 1129.0),
        (761.0, 636.0, 1142.0),
        (770.0, 644.0, 1156.0),
    ];
    pub const CMN_STATS_R: [(f64, f64, f64); 40] = [
        (129.0, 97.0, 97.0),
        (136.0, 102.0, 102.0),
        (144.0, 108.0, 108.0),
        (151.0, 113.0, 113.0),
        (159.0, 119.0, 119.0),
        (166.0, 125.0, 125.0),
        (174.0, 130.0, 130.0),
        (181.0, 136.0, 136.0),
        (189.0, 142.0, 142.0),
        (196.0, 147.0, 147.0),
        (204.0, 153.0, 153.0),
        (212.0, 159.0, 159.0),
        (219.0, 164.0, 164.0),
        (227.0, 170.0, 170.0),
        (234.0, 176.0, 176.0),
        (242.0, 181.0, 181.0),
        (249.0, 187.0, 187.0),
        (257.0, 193.0, 193.0),
        (264.0, 198.0, 198.0),
        (272.0, 204.0, 204.0),
        (280.0, 210.0, 210.0),
        (287.0, 215.0, 215.0),
        (295.0, 221.0, 221.0),
        (302.0, 226.0, 226.0),
        (310.0, 232.0, 232.0),
        (317.0, 238.0, 238.0),
        (325.0, 243.0, 243.0),
        (332.0, 249.0, 249.0),
        (340.0, 255.0, 255.0),
        (347.0, 260.0, 260.0),
        (355.0, 266.0, 266.0),
        (363.0, 272.0, 272.0),
        (370.0, 277.0, 277.0),
        (378.0, 283.0, 283.0),
        (385.0, 289.0, 289.0),
        (393.0, 294.0, 294.0),
        (400.0, 300.0, 300.0),
        (408.0, 306.0, 306.0),
        (415.0, 311.0, 311.0),
        (423.0, 317.0, 317.0),
    ];
    pub const CMN_STATS_S: [(f64, f64, f64); 50] = [
        (192.0, 144.0, 144.0),
        (200.0, 150.0, 150.0),
        (209.0, 157.0, 157.0),
        (218.0, 164.0, 164.0),
        (227.0, 170.0, 170.0),
        (236.0, 177.0, 177.0),
        (245.0, 184.0, 184.0),
        (254.0, 191.0, 191.0),
        (263.0, 197.0, 197.0),
        (272.0, 204.0, 204.0),
        (281.0, 211.0, 211.0),
        (290.0, 217.0, 217.0),
        (299.0, 224.0, 224.0),
        (308.0, 231.0, 231.0),
        (317.0, 238.0, 238.0),
        (326.0, 244.0, 244.0),
        (335.0, 251.0, 251.0),
        (344.0, 258.0, 258.0),
        (353.0, 264.0, 264.0),
        (362.0, 271.0, 271.0),
        (371.0, 278.0, 278.0),
        (380.0, 285.0, 285.0),
        (389.0, 291.0, 291.0),
        (398.0, 298.0, 298.0),
        (407.0, 305.0, 305.0),
        (416.0, 312.0, 312.0),
        (424.0, 318.0, 318.0),
        (433.0, 325.0, 325.0),
        (442.0, 332.0, 332.0),
        (451.0, 338.0, 338.0),
        (460.0, 345.0, 345.0),
        (469.0, 352.0, 352.0),
        (478.0, 359.0, 359.0),
        (487.0, 365.0, 365.0),
        (496.0, 372.0, 372.0),
        (505.0, 379.0, 379.0),
        (514.0, 385.0, 385.0),
        (523.0, 392.0, 392.0),
        (532.0, 399.0, 399.0),
        (541.0, 406.0, 406.0),
        (550.0, 412.0, 412.0),
        (559.0, 419.0, 419.0),
        (568.0, 426.0, 426.0),
        (577.0, 432.0, 432.0),
        (586.0, 439.0, 439.0),
        (595.0, 446.0, 446.0),
        (604.0, 453.0, 453.0),
        (613.0, 459.0, 459.0),
        (622.0, 466.0, 466.0),
        (631.0, 473.0, 473.0),
    ];
    pub const CMN_STATS_U: [(f64, f64, f64); 60] = [
        (312.0, 234.0, 234.0),
        (324.0, 243.0, 243.0),
        (336.0, 252.0, 252.0),
        (348.0, 261.0, 261.0),
        (360.0, 270.0, 270.0),
        (372.0, 279.0, 279.0),
        (384.0, 288.0, 288.0),
        (396.0, 297.0, 297.0),
        (409.0, 306.0, 306.0),
        (421.0, 315.0, 315.0),
        (433.0, 325.0, 325.0),
        (445.0, 334.0, 334.0),
        (457.0, 343.0, 343.0),
        (469.0, 352.0, 352.0),
        (481.0, 361.0, 361.0),
        (494.0, 370.0, 370.0),
        (506.0, 379.0, 379.0),
        (518.0, 388.0, 388.0),
        (530.0, 397.0, 397.0),
        (542.0, 406.0, 406.0),
        (554.0, 416.0, 416.0),
        (566.0, 425.0, 425.0),
        (578.0, 434.0, 434.0),
        (591.0, 443.0, 443.0),
        (603.0, 452.0, 452.0),
        (615.0, 461.0, 461.0),
        (627.0, 470.0, 470.0),
        (639.0, 479.0, 479.0),
        (651.0, 488.0, 488.0),
        (663.0, 497.0, 497.0),
        (676.0, 507.0, 507.0),
        (688.0, 516.0, 516.0),
        (700.0, 525.0, 525.0),
        (712.0, 534.0, 534.0),
        (724.0, 543.0, 543.0),
        (736.0, 552.0, 552.0),
        (748.0, 561.0, 561.0),
        (760.0, 570.0, 570.0),
        (773.0, 579.0, 579.0),
        (785.0, 588.0, 588.0),
        (797.0, 598.0, 598.0),
        (809.0, 607.0, 607.0),
        (821.0, 616.0, 616.0),
        (833.0, 625.0, 625.0),
        (845.0, 634.0, 634.0),
        (858.0, 643.0, 643.0),
        (870.0, 652.0, 652.0),
        (882.0, 661.0, 661.0),
        (894.0, 670.0, 670.0),
        (906.0, 679.0, 679.0),
        (918.0, 689.0, 689.0),
        (930.0, 698.0, 698.0),
        (942.0, 707.0, 707.0),
        (955.0, 716.0, 716.0),
        (967.0, 725.0, 725.0),
        (979.0, 734.0, 734.0),
        (991.0, 743.0, 743.0),
        (1003.0, 752.0, 752.0),
        (1015.0, 761.0, 761.0),
        (1027.0, 770.0, 770.0),
    ];
}

